
Two way to retrieve metadata of pods/deployments/resources/..:
+ Downward API
+ APIServer

#-------------------------------------------#
#         METHOD #1: DOWNWARD API           #
#-------------------------------------------#
+ when-to-use: expose the data to application without having to rewrite
               the application or wrap it in a shell script 
               (which expose data as evn variables)

+ Pros: easy to use.
  Cons: limited to the scope of pod, not cluster-wide.

+ Usage:  
  Same as ConfigMap, save in volume (via file in /etc/downward/...)
                                                 _____________/podName
                                                 _____________/labels
                                                 _____________/annotations
                                                 _____________/containerMemoryLimitBytes

#-------------------------------------------#
#       METHOD #2A: TALK TO API SERVER      #
#           (from kubectl node)             #
#-------------------------------------------#
+ when-to-use: get metadata of cluster-wide resource

+ Pros: cluster-wide metadata.
  Cons: complicated setup (kubectl proxy, rbac,...) when using inside a pod.

+ Usage from <kubectl_node>
  kubectl proxy --> automatically setup proxy to APIServer (get from kubectl cluster info)
  curl http://localhost:8001

#-------------------------------------------#
#       METHOD #2B: TALK TO API SERVER      #
#           (from within a Pod)             #
#-------------------------------------------#

# Get IP of APIServer
@<test_pod> : env | grep KUBERNETES_SERVICE --> IP/Port of APIServer
@<test_pod> : curl https://kubernetes -k
                   (since DNS inside pod -> use domain-name)


# Setup credentials for authorization of APIServer (since run https, port 443)
# certificate stored at 'ca.crt'
@<test_pod> : export CURL_CA_BUNDLE=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
@<test_pod> : TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
@<test_pod> : curl -H "Authorization: Bearer $TOKEN" https://kubernetes

# List all pods in all namespaces
@<test_pod> : NS=$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace)
@<test_pod> : curl -H "Authorization: Bearer $TOKEN" https://kubernetes/api/v1/namespaces/$NS/pods

<<Note>>
# Incase of using RBAC plugin for authorization at APIServer, we have to setup RBAC for 'default' ServiceAccount.
# Otherwise, use 'admin-cluster' permission as workaround --> DANGEROUS in real production
kubectl create clusterrolebinding super-power-binding \
--clusterrole=cluster-admin \
--group=system:serviceaccounts

#-------------------------------------------#
#       METHOD #2B: TALK TO API SERVER      #
#           (from within a Pod)             #
#        (using Ambassador container)       #
#-------------------------------------------#

# Create pod with 'main' container & 'kubectl-proxy' container
--------------
apiVersion: v1
kind: Pod
metadata:
    name: curl-with-ambassador
spec:
    containers:
    - name: main
      image: tutum/curl
      command: ["sleep", "9999999"]
    - name: ambassador 
      image: luksa/kubectl-proxy:1.6.2

# Talk to APIServer in <curl-with-ambassador_pod>
root@curl-with-ambassador:/# curl localhost:8001

<<Note>> 
If you plan on doing more than simple API requests, use one of the existing Kubernetes API client libraries
+ Golang  https://github.com/kubernetes/client-go
+ Python  https://github.com/kubernetes-incubator/client-python
